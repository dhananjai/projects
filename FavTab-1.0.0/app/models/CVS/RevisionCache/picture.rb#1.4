class Picture < ActiveRecord::Base
  require 'open-uri'
  has_many :likes, :as => :likable, :dependent => :destroy
  has_many :photo_comments, :as => :discussable, :dependent => :destroy
  belongs_to :album
  validates :photo_file_name, :uniqueness => {:scope => :album_id}
   has_attached_file :photo, :path => ":rails_root/public/albums/photos/:id/:style_:basename.:extension",
    :url => "/albums/photos/:id/:style_:basename.:extension",
    :styles => {
    :small  => "50x50>",
    :medium=> "190x" }, :whiny => false

  def upload_image(url)
    begin
      io = open(URI.escape(url))
      if io
        def io.original_filename; base_uri.path.split('/').last; end
        io.original_filename.blank? ? nil : io
        self.photo = io
      end
      self.save(false)
    rescue Exception => e
      logger.info "EXCEPTION# #{e.message}"
    end
  end


  #--
  #Created by: Jalendra Bhanarkar
  #Created on: 15/02/2012
  #Purpose: to get if picture is liked or not
  #++
  def is_liked_by(u_id)
    Like.find(:all,:conditions=>["user_id=? and likable_id=? and likable_type=?",u_id,self.id,'Picture']).present?
  end

  #--
  #Created by: Jalendra Bhanarkar
  #Created on: 15/02/2012
  #Purpose: to get all picture likers
  #++
  def likers
    users = User.find_by_sql(["SELECT u.* FROM (likes l LEFT JOIN users u ON l.user_id=u.id)
                          WHERE l.likable_id=?",self.id ])
  end

  #--
  #Created by: Jalendra Bhanarkar
  #Created on: 15/02/2012
  #Purpose: to get like count of picture
  #++
  def like_count
    Like.count(:conditions=>["likable_id=?",self.id])
  end

  def comment_count
    PhotoComment.count(:conditions=>["discussable_id=?",self.id])
  end
end

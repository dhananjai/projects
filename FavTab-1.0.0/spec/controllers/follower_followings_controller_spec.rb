require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe FollowerFollowingsController do

  # This should return the minimal set of attributes required to create a valid
  # FollowerFollowing. As you add validations to FollowerFollowing, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  describe "GET index" do
    it "assigns all follower_followings as @follower_followings" do
      follower_following = FollowerFollowing.create! valid_attributes
      get :index
      assigns(:follower_followings).should eq([follower_following])
    end
  end

  describe "GET show" do
    it "assigns the requested follower_following as @follower_following" do
      follower_following = FollowerFollowing.create! valid_attributes
      get :show, :id => follower_following.id
      assigns(:follower_following).should eq(follower_following)
    end
  end

  describe "GET new" do
    it "assigns a new follower_following as @follower_following" do
      get :new
      assigns(:follower_following).should be_a_new(FollowerFollowing)
    end
  end

  describe "GET edit" do
    it "assigns the requested follower_following as @follower_following" do
      follower_following = FollowerFollowing.create! valid_attributes
      get :edit, :id => follower_following.id
      assigns(:follower_following).should eq(follower_following)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new FollowerFollowing" do
        expect {
          post :create, :follower_following => valid_attributes
        }.to change(FollowerFollowing, :count).by(1)
      end

      it "assigns a newly created follower_following as @follower_following" do
        post :create, :follower_following => valid_attributes
        assigns(:follower_following).should be_a(FollowerFollowing)
        assigns(:follower_following).should be_persisted
      end

      it "redirects to the created follower_following" do
        post :create, :follower_following => valid_attributes
        response.should redirect_to(FollowerFollowing.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved follower_following as @follower_following" do
        # Trigger the behavior that occurs when invalid params are submitted
        FollowerFollowing.any_instance.stub(:save).and_return(false)
        post :create, :follower_following => {}
        assigns(:follower_following).should be_a_new(FollowerFollowing)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        FollowerFollowing.any_instance.stub(:save).and_return(false)
        post :create, :follower_following => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested follower_following" do
        follower_following = FollowerFollowing.create! valid_attributes
        # Assuming there are no other follower_followings in the database, this
        # specifies that the FollowerFollowing created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        FollowerFollowing.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => follower_following.id, :follower_following => {'these' => 'params'}
      end

      it "assigns the requested follower_following as @follower_following" do
        follower_following = FollowerFollowing.create! valid_attributes
        put :update, :id => follower_following.id, :follower_following => valid_attributes
        assigns(:follower_following).should eq(follower_following)
      end

      it "redirects to the follower_following" do
        follower_following = FollowerFollowing.create! valid_attributes
        put :update, :id => follower_following.id, :follower_following => valid_attributes
        response.should redirect_to(follower_following)
      end
    end

    describe "with invalid params" do
      it "assigns the follower_following as @follower_following" do
        follower_following = FollowerFollowing.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        FollowerFollowing.any_instance.stub(:save).and_return(false)
        put :update, :id => follower_following.id, :follower_following => {}
        assigns(:follower_following).should eq(follower_following)
      end

      it "re-renders the 'edit' template" do
        follower_following = FollowerFollowing.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        FollowerFollowing.any_instance.stub(:save).and_return(false)
        put :update, :id => follower_following.id, :follower_following => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested follower_following" do
      follower_following = FollowerFollowing.create! valid_attributes
      expect {
        delete :destroy, :id => follower_following.id
      }.to change(FollowerFollowing, :count).by(-1)
    end

    it "redirects to the follower_followings list" do
      follower_following = FollowerFollowing.create! valid_attributes
      delete :destroy, :id => follower_following.id
      response.should redirect_to(follower_followings_url)
    end
  end

end
